// src/commands/addObject.js
import generateUniqueId from '../utils/generateUniqueId.js';
import computeOutlines from '../utils/computeOutlines.js';
import getLastTemplateObject from '../utils/getItemTemplate.js';

/**
 * Inserts a new object immediately after the item with the specified outline number,
 * assigns it a UUID, and recomputes outlines for the entire list.
 *
  * @param {Array} data - The array of objects to modify.
  * @param {string} outlineNumber - The outline number of the item after which to insert the new object.
  * @returns {Array} - The modified array with the new object inserted.
  * @throws {Error} - Throws an error if the template is empty or if the outline number is invalid.
 */
export default async function addObject(data, outlineNumber, newTitle) {
  let template;
  try {
    template = await getLastTemplateObject();
    if (!template) {
      throw new Error('Template is empty or could not be loaded.');
    }
  } catch (err) {
    throw new Error(`Failed to load template: ${err.message}`);
  }

  // 1. Find the selected index based on the outline number
  const selectedIndex = data.findIndex(item => item.outline === outlineNumber);

  if (selectedIndex === -1) {
    console.error(
      `⚠️  No item found with outline number: ${outlineNumber}. Please provide a valid outline number.`
    );
    return;
  }

  // 2. Prepare new object based on external template
  const parentHier = data[selectedIndex].hier;
  // Get the name of the ID field, which can dynamically change
  // It can be find by looking for a name ennding with _ID
  const idField = Object.keys(template).find(key => key.endsWith('_ID'));
  if (!idField) {
    console.error('⚠️  No ID field found in the template. Please check the template structure.');
    return;
  }
  const newObject = {
    ...template,                      // load defaults from JSON
    hier: parentHier,                 // inherit parent's hierarchy
    outline: 'pending'                // placeholder until computeOutlines runs
  };
  const uniqueId = generateUniqueId();
  newObject[idField] = uniqueId;
  newObject.title = newTitle;

  // If the highest proj_ID and increment by 1
  const maxProjId = Math.max(...data.map(item => item.proj_ID ?? 0), 0);
  newObject.proj_ID = maxProjId + 1;

  // 3. Insert and update selection
  const insertPos = selectedIndex + 1;
  data.splice(insertPos, 0, newObject);
  const newSelectedIndex = insertPos;

  // 4. Recompute outlines for the entire data array
  computeOutlines(data);

  return data;
}
