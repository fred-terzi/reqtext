// mdToReqtHandler.js
// Handler for converting Markdown (.md) generated by reqtToMD back to .reqt.json format.
// See reqt_to_md.reqt.json for requirements.

import fs from 'fs';
import path from 'path';
import enquirer from 'enquirer';
import { getCurrentReqtFilePath } from '../utils/getCurrentReqtFilePath.js';

function parseHeader(headerLine) {
    // Match header: e.g. '# 0: Title', '## 1: Title', '### 1.1: Title', etc.
    const headerMatch = /^(#+)\s+([\d.]+):\s*(.*)$/.exec(headerLine.trim());
    if (!headerMatch) return null;
    const hashes = headerMatch[1];
    const outline = headerMatch[2];
    const title = headerMatch[3];
    let hier;
    if (hashes === '#') hier = 0; // Project root
    else if (hashes === '##') hier = 0; // Other hier=0
    else if (hashes === '###') hier = 1; // hier=1 or deeper
    else hier = 1; // treat any deeper as hier=1 for round-trip compatibility
    return { hier, outline, title };
}

async function promptOverwrite(filePath) {
    const { confirm } = await enquirer.prompt({
        type: 'confirm',
        name: 'confirm',
        message: `This will overwrite any unsaved change in the reqt.json, Overwrite?`,
        initial: false
    });
    return confirm;
}

async function mdToReqt() {
    // 1. Get reqt file path from utility
    const reqtFilePath = getCurrentReqtFilePath();
    const reqtName = path.basename(reqtFilePath, path.extname(reqtFilePath));
    // Look for the markdown file in the root directory
    const workspaceRoot = path.resolve('.');
    const mdFilePath = path.join(workspaceRoot, `${reqtName}.md`);
    const jsonFilePath = path.join(path.dirname(reqtFilePath), `${reqtName}.json`);

    // 2. Read the .md file
    const lines = fs.readFileSync(mdFilePath, 'utf-8').split(/\r?\n/);
    const items = [];
    let i = 0;
    while (i < lines.length) {
        // Find start of item
        if (!lines[i].startsWith('<!-- reqt_id:')) { i++; continue; }
        const reqtIdMatch = /<!-- reqt_id: (.+?) -->/.exec(lines[i]);
        const reqt_ID = reqtIdMatch ? reqtIdMatch[1].trim() : '';
        i++;
        // Find header
        while (i < lines.length && lines[i].trim() === '') i++;
        const headerLine = lines[i] || '';
        const header = parseHeader(headerLine);
        i++;
        // Find status
        let status = '';
        while (i < lines.length && lines[i].trim() === '') i++;
        if (lines[i] && lines[i].startsWith('**Status:**')) {
            status = lines[i].replace('**Status:**', '').trim();
            i++;
        }
        // Find description (all lines until next reqt_id or EOF)
        let descriptionLines = [];
        while (i < lines.length && !lines[i].startsWith('<!-- reqt_id:')) {
            descriptionLines.push(lines[i]);
            i++;
        }
        const description = descriptionLines.join('\n').trim();
        // Build item
        if (header && reqt_ID) {
            items.push({
                title: header.title,
                hier: header.hier,
                outline: header.outline,
                status,
                description,
                reqt_ID
            });
        }
    }
    // 3. Prompt before overwriting if file exists
    if (fs.existsSync(jsonFilePath)) {
        const ok = await promptOverwrite(jsonFilePath);
        if (!ok) {
            console.log('Aborted. No changes made.');
            return;
        }
    }
    // 4. Write to .json file
    fs.writeFileSync(jsonFilePath, JSON.stringify(items, null, 2), 'utf-8');
    console.log(`reqt.json file updated: ${jsonFilePath}`);
}

export default mdToReqt;
