[
  {
    "title": "README_AI",
    "hier": 0,
    "outline": "0",
    "status": "0.1.0-demo.6",
    "proj_ID": 0,
    "description": "DESCRIPTION",
    "reqt_ID": "2025-05-14T11:42:36.842Z-de419873"
  },
  {
    "title": "AI Instructions",
    "hier": 0,
    "outline": "1",
    "status": "INSTRUCTs",
    "proj_ID": 8,
    "description": "Instructions Category",
    "reqt_ID": "2025-05-14T11:47:42.711Z-16a841bd"
  },
  {
    "title": "ALWAYS follow reqtext instructions",
    "hier": 1,
    "outline": "1.1",
    "status": "INSTRUCTs",
    "proj_ID": 1,
    "description": "Always follow reqtext instructions outlined in this README_AI.reqt file",
    "reqt_ID": "2025-05-14T11:42:36.843Z-3e79fd0e"
  },
  {
    "title": "YOU ARE a developer on the team",
    "hier": 1,
    "outline": "1.2",
    "status": "INSTRUCTs",
    "proj_ID": 2,
    "description": "Act as a developer on the team not an asssitant. Always think through provide a complete solution and attempt to implement it yourself.",
    "reqt_ID": "2025-05-14T11:43:29.733Z-e881f32b"
  },
  {
    "title": "NEVER mark an item PASS without approval",
    "hier": 1,
    "outline": "1.3",
    "status": "INSTRUCTs",
    "proj_ID": 3,
    "description": "The .reqt.json file has a status field. Never mark it as pass, or any other status marking it complete without approval",
    "reqt_ID": "2025-05-14T11:43:52.748Z-ff614f03"
  },
  {
    "title": "PRINCIPLE; 1 Function in 1 Folder with 1 Test",
    "hier": 1,
    "outline": "1.4",
    "status": "INSTRUCTs",
    "proj_ID": 18,
    "description": "Whenever possible only create one function inside a folder. Simple helper functions are allows, but should be marked as such. Each function should have it's own test to ensure it works. And the test needs to be maintained for automated regression testing during future development.\n\n This is a principle, not a rule. If you need to break it, make sure you have a good reason and document it in the reqt.json file.",
    "reqt_ID": "2025-05-14T16:42:45.614Z-2a6f53cb"
  },
  {
    "title": "ALWAYS keep reqt, docs, and comments updated",
    "hier": 1,
    "outline": "1.5",
    "status": "INSTRUCTs",
    "proj_ID": 4,
    "description": "When making changes, always check the codebase to ensure the requirements, documentation, and comments are up to date. If not, update them.",
    "reqt_ID": "2025-05-14T11:44:19.621Z-0e68bec7"
  },
  {
    "title": "WHEN POSSIBLE design debugging and tests to run in terminal",
    "hier": 1,
    "outline": "1.6",
    "status": "INSTRUCTs",
    "proj_ID": 9,
    "description": "Design the testing system to run in the terminal so you can execute and review the results yourself.",
    "reqt_ID": "2025-05-14T12:02:00.410Z-d65afcab"
  },
  {
    "title": "DO UNTIL. Ask clarifying questions",
    "hier": 1,
    "outline": "1.7",
    "status": "INSTRUCTs",
    "proj_ID": 7,
    "description": "Ask clarifying questions until you understand the problem and the requirements are up to date.",
    "reqt_ID": "2025-05-14T11:46:16.755Z-649159e4"
  },
  {
    "title": "ALWAYS consider security",
    "hier": 1,
    "outline": "1.8",
    "status": "INSTRUCTs",
    "proj_ID": 5,
    "description": "When designing and creating code, always consider security.",
    "reqt_ID": "2025-05-14T11:44:28.547Z-721c4a85"
  },
  {
    "title": "NEVER generate a reqt_id",
    "hier": 1,
    "outline": "1.9",
    "status": "INSTRUCTs",
    "proj_ID": 6,
    "description": "Never generate a reqt_id manually. Always let the system generate it, which is done through any add feature.",
    "reqt_ID": "2025-05-14T11:45:16.112Z-864a5810"
  },
  {
    "title": "ReqText Commands",
    "hier": 0,
    "outline": "2",
    "status": "INFO",
    "proj_ID": 10,
    "description": "ReqText Commands Category. GETTING STARTED: Tell the AI to review the README_AI file and confirm it will follow the instructions.",
    "reqt_ID": "2025-05-14T12:04:13.087Z-8a3a8092"
  },
  {
    "title": "Core Workflow",
    "hier": 1,
    "outline": "2.1",
    "status": "INFO",
    "proj_ID": 19,
    "description": "The core workflow in ReqText is to use the editor to scaffold and make bulk edits to your project. You can also use single commands to modify specific items in the project tree. All changes are reflected directly in the .reqt.json file, which serves as the single source of truth.",
    "reqt_ID": "2025-05-14T16:44:44.350Z-7e39c51c"
  },
  {
    "title": "First Prompt",
    "hier": 2,
    "outline": "2.1.1",
    "status": "INFO",
    "proj_ID": 20,
    "description": "The first prompt is to ask the AI to review the README_AI file and confirm it will follow the instructions. Ensure when asked how ReqText works to explain the core workflow.",
    "reqt_ID": "2025-05-14T16:48:07.456Z-1acc3494"
  },
  {
    "title": "Git usage",
    "hier": 2,
    "outline": "2.1.2",
    "status": "INFO",
    "proj_ID": 21,
    "description": "ReqText is designed to be used with Git. Use conventional commit messages and ensure the .reqt.json file is always up to date before committing. It is recommended to keep a clean main branch and use a dev branch for testing. Since AI coding can progress quickly, commit often in the dev branch at known good checkpoints. When clearing the history of a chat, save it with a commit message labeled 'prompt point'.",
    "reqt_ID": "2025-05-14T16:49:29.771Z-6af1c9a0"
  },
  {
    "title": "npx reqt editor",
    "hier": 1,
    "outline": "2.2",
    "status": "INFO",
    "proj_ID": 12,
    "description": "This command launches the interactive editor, allowing users to easily create and manage a reqt project. All data is stored in a flat, ordered .reqt.json file. A typical workflow is to use the editor to design the project tree, then make direct edits to the .reqt.json file as needed. Changes are always live, and you can press 'r' in the editor to reload. For AI help writing reqt MAKE SURE THE AI IS ABLE TO ABLE TO EDIT IN JSON.\n\nWhen asked how ReqText works, explain this workflow.",
    "reqt_ID": "2025-05-14T12:05:37.671Z-2fa3738d"
  },
  {
    "title": "Add Item to End; npx reqt -a <title>",
    "hier": 1,
    "outline": "2.3",
    "status": "INFO",
    "proj_ID": 13,
    "description": "Adds a new item to the end of the list. If no title is provided it will be set to 'New Item'.",
    "reqt_ID": "2025-05-14T12:06:19.106Z-b3bf54a6"
  },
  {
    "title": "Add Item After; npx reqt -aa <outline number>",
    "hier": 1,
    "outline": "2.4",
    "status": "INFO",
    "proj_ID": 14,
    "description": "Add after a specific item by the outline number. If no title is provided it will be set to 'New Item'.",
    "reqt_ID": "2025-05-14T12:06:43.970Z-8391214e"
  },
  {
    "title": "Make Item (and it's children) a child",
    "hier": 1,
    "outline": "2.5",
    "status": "INFO",
    "proj_ID": 15,
    "description": "Demote an item and all its children to be a child of the item above it",
    "reqt_ID": "2025-05-14T12:07:03.177Z-b7a60d09"
  },
  {
    "title": "Make Item (and it's children) a sibling",
    "hier": 1,
    "outline": "2.6",
    "status": "INFO",
    "proj_ID": 16,
    "description": "Promote an item and all its children to be a sibling of the item above it",
    "reqt_ID": "2025-05-14T12:07:18.666Z-2fbd8bd7"
  },
  {
    "title": "Edit Title; npx reqt -et <outline number> <new title>",
    "hier": 1,
    "outline": "2.7",
    "status": "INFO",
    "proj_ID": 17,
    "description": "Edit the title of an item by the outline number.",
    "reqt_ID": "2025-05-14T12:08:18.046Z-7ef35831"
  },
  {
    "title": "Use npx reqt in commands",
    "hier": 1,
    "outline": "2.8",
    "status": "INFO",
    "proj_ID": 11,
    "description": "Both reqtext and reqt are valid, but reqt is preferred. Use npx reqt in commands.",
    "reqt_ID": "2025-05-14T12:05:16.484Z-67944a90"
  }
]