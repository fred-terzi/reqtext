[
  {
    "title": "README_AI",
    "hier": 0,
    "outline": "0",
    "requirement": "This REAME_AI is only meant for AI. These instructions are meant for AI coding tools. Instrunctions for human developers are in the README.md file and are different than these.",
    "status": "0.1.0-demo.6",
    "reqt_ID": "2025-05-18T03:28:02.338Z-63d1e4f2-.reqt"
  },
  {
    "title": "AI Instructs",
    "hier": 0,
    "outline": "1",
    "requirement": "Instructions Category",
    "status": "INSTRUCTs",
    "reqt_ID": "2025-05-18T03:28:02.338Z-4d77e6ae-.reqt",
    "test_exists": true
  },
  {
    "title": "ALWAYS follow reqtext instructions",
    "hier": 1,
    "outline": "1.1",
    "requirement": "Always follow reqtext instructions outlined in this README_AI.reqt file",
    "status": "INSTRUCTs",
    "reqt_ID": "2025-05-18T03:28:02.338Z-43eb7405-.reqt"
  },
  {
    "title": "NEVER generate a reqt_id manually",
    "hier": 1,
    "outline": "1.2",
    "requirement": "Never generate a reqt_id manually. You should always use reqt -a or reqt -aa to generate a reqt_id. The reqt_id is a unique identifier for each requirement and is essential for tracking changes and maintaining the integrity of the project. If directly creating items in the .reqt.json file do not put a reqt_id and after run reqt clean to generate a reqt_id.",
    "status": "INSTRUCTs",
    "reqt_ID": "2025-05-18T03:28:02.338Z-632953a8-.reqt"
  },
  {
    "title": "NEVER Delete a req_id mark in the markdown files",
    "hier": 1,
    "outline": "1.3",
    "requirement": "In the reqt.md never delete a reqt_id comment mark. This is essential for the system to track changes and maintain the integrity of the project and to save the changes in the .reqt.md to the reqt.json",
    "status": "INSTRUCTs",
    "reqt_ID": "2025-05-18T03:28:02.338Z-64fc3a9b-.reqt"
  },
  {
    "title": "NEVER mark an item PASS without approval",
    "hier": 1,
    "outline": "1.4",
    "requirement": "The .reqt.json file has a status field. Never mark it as pass, or any other status marking it complete without approval",
    "status": "INSTRUCTs",
    "reqt_ID": "2025-05-18T03:28:02.338Z-ed7e4054-.reqt"
  },
  {
    "title": "ALWAYS keep reqt, docs, and comments updated",
    "hier": 1,
    "outline": "1.5",
    "requirement": "When making changes, always check the codebase to ensure the requirements, documentation, and comments are up to date. If not, update them.",
    "status": "INSTRUCTs",
    "reqt_ID": "2025-05-18T03:28:02.338Z-e90ee161-.reqt"
  },
  {
    "reqt_ID": "2025-05-18T03:32:27.295Z-2d1c8eec-.reqt",
    "hier": 1,
    "outline": "1.6",
    "title": "DRY - Don't Repeat Yourself",
    "requirement": "REQUIREMENT",
    "acceptance": "ACCEPTANCE",
    "details": "DETAILS",
    "status": "INSTRUCTs",
    "test_exists": false,
    "test_passed": false
  },
  {
    "title": "ALWAYS consider security",
    "hier": 1,
    "outline": "1.7",
    "requirement": "When designing and creating code, always consider security.",
    "status": "INSTRUCTs",
    "reqt_ID": "2025-05-18T03:28:02.339Z-d3adbfbf-.reqt"
  },
  {
    "reqt_ID": "2025-05-18T15:08:20.028Z-8e854996-.reqt",
    "hier": 0,
    "outline": "2",
    "title": "ReqText Markdown Workflow",
    "requirement": "ReqText must provide a markdown-based workflow for editing long-form requirement fields (requirement, acceptance, details) outside the terminal editor. The workflow must allow users to export requirements to markdown, edit them, and import changes back into the .reqt.json source of truth.",
    "acceptance": "- The user can run 'reqt out-md' or 'reqt -omd' to export requirements to a markdown file.\n- The markdown file contains all long-form fields (requirement, acceptance, details) for each item.\n- The user can edit these fields in the markdown file.\n- The user can run 'reqt in-md' or 'reqt -imd' to import changes from the markdown file back into the .reqt.json file.\n- After import, the .reqt.json file reflects the changes made in markdown.\n- The markdown file is deleted by default after import, unless the user specifies to keep it (with --keep or -k).\n- The workflow is documented in ReqText.reqt.md and README_AI.reqt.",
    "details": "ReqText's markdown workflow is designed to 'checkout' and 'checkin' changes to the source of truth (sot) in the .reqt.json file. The workflow is as follows:\n\n1. The user runs `reqt out-md` or `reqt -omd` to create a markdown file from the .reqt.json source of truth. The markdown file contains all long-form fields (requirement, acceptance, details) for each requirement.\n2. The user edits the markdown file as needed.\n3. The user runs `reqt in-md` or `reqt -imd` to import changes from the markdown file back into the .reqt.json file. By default, the markdown file is deleted after import. The user can keep the file by passing --keep or -k.\n4. Only the long-form fields (requirement, acceptance, details) are updated via this workflow; other fields (title, status, test_exists, test_passed) are not editable via markdown.\n5. The workflow is intended for bulk editing and review of requirement text.",
    "status": "NEW",
    "test_exists": false,
    "test_passed": false
  },
  {
    "reqt_ID": "2025-05-18T19:15:29.714Z-4c5b105c-.reqt",
    "hier": 1,
    "outline": "2.1",
    "title": "reqt out-md or reqt -omd",
    "requirement": "ReqText must provide a command ('reqt out-md' or 'reqt -omd') that exports all requirements to a markdown file, including the long-form fields (requirement, acceptance, details) for each item.",
    "acceptance": "- Running 'reqt out-md' or 'reqt -omd' creates a markdown file containing all requirements.\n- The markdown file includes the fields: requirement, acceptance, and details for each item.\n- The markdown file preserves the outline structure and reqt_IDs as comments.\n- The file is suitable for editing in any markdown editor.\n- The command is documented in ReqText.reqt.md and README_AI.reqt.",
    "details": "- The markdown file is generated from the .reqt.json source of truth.\n- Each requirement is represented in markdown, with its long-form fields clearly labeled.\n- The reqt_ID is included as a comment for tracking.\n- The file is named according to convention (e.g., ReqText.reqt.md or similar).\n- Only the long-form fields are included for editing; other fields are not present in the markdown export.\n- The export command is intended for bulk editing and review of requirement text.",
    "status": "NEW",
    "test_exists": false,
    "test_passed": false
  },
  {
    "reqt_ID": "2025-05-18T19:16:59.286Z-4dbf9609-.reqt",
    "hier": 1,
    "outline": "2.2",
    "title": "reqt in-md or reqt -imd",
    "requirement": "ReqText must provide a command ('reqt in-md' or 'reqt -imd') that imports changes from a markdown file back into the .reqt.json source of truth, updating only the long-form fields (requirement, acceptance, details) for each item.",
    "acceptance": "- Running 'reqt in-md' or 'reqt -imd' reads the markdown file and updates the .reqt.json file with changes to the requirement, acceptance, and details fields.\n- Only these fields are updated; other fields are not affected.\n- The markdown file is deleted by default after import, unless the user specifies --keep or -k.\n- The import process preserves the outline structure and reqt_IDs.\n- The command is documented in ReqText.reqt.md and README_AI.reqt.",
    "details": "- The import command reads the markdown file generated by 'reqt out-md' or 'reqt -omd'.\n- It matches requirements by reqt_ID and updates only the long-form fields.\n- The .reqt.json file is updated in place.\n- By default, the markdown file is deleted after import. The user can keep it by passing --keep or -k.\n- The import command is intended for bulk updating of requirement text after review or editing in markdown.",
    "status": "NEW",
    "test_exists": false,
    "test_passed": false
  },
  {
    "title": "ReqText Commands",
    "hier": 0,
    "outline": "3",
    "requirement": "ReqText Commands Category. GETTING STARTED: Tell the AI to review the README_AI file and confirm it will follow the instructions.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-f9b94eeb-.reqt"
  },
  {
    "title": "Core Workflow",
    "hier": 1,
    "outline": "3.1",
    "requirement": "The first step is to prompt the AI to review the README_AI file and confirm it will follow the instructions. The core workflow in ReqText is to use the editor to scaffold and make bulk edits to your project. You can also use single commands to modify specific items in the project tree. All changes are reflected directly in the .reqt.json file, which serves as the single source of truth.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-e5c8aec6-.reqt"
  },
  {
    "title": "npx reqt init <project name>",
    "hier": 1,
    "outline": "3.2",
    "requirement": "Initialize a new reqt project. the project name will be used as the file name. The project name must be unique. Currently only one .reqt file is supported per folder. When asked how to start a reqtext project, ask for what they want the name to be then run this command with their name.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-c151c259-.reqt"
  },
  {
    "title": "Add Item to End; npx reqt -a <title>",
    "hier": 1,
    "outline": "3.3",
    "requirement": "Adds a new item to the end of the list. If no title is provided it will be set to 'New Item'.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-54e2441b-.reqt"
  },
  {
    "title": "Add Item After; npx reqt -aa <outline number>",
    "hier": 1,
    "outline": "3.4",
    "requirement": "Add after a specific item by the outline number. If no title is provided it will be set to 'New Item'.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-eaccfb87-.reqt"
  },
  {
    "title": "Make Item (and it's children) a child",
    "hier": 1,
    "outline": "3.5",
    "requirement": "Demote an item and all its children to be a child of the item above it",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-f015666d-.reqt"
  },
  {
    "title": "Make Item (and it's children) a sibling",
    "hier": 1,
    "outline": "3.6",
    "requirement": "Promote an item and all its children to be a sibling of the item above it",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-cd285604-.reqt"
  },
  {
    "title": "Edit Title; npx reqt -et <outline number> <new title>",
    "hier": 1,
    "outline": "3.7",
    "requirement": "Edit the title of an item by the outline number.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-bbee1870-.reqt"
  },
  {
    "reqt_ID": "2025-05-18T03:29:25.629Z-e6dc0269-.reqt",
    "hier": 1,
    "outline": "3.8",
    "title": "reqt set-status <outline number> \"New Status\"",
    "requirement": "The command 'reqt set-status <outline number> \"New Status\"' must set the status field of the requirement with the given outline number to the value provided by the user.",
    "acceptance": "When the command is run with a valid outline number and status, the corresponding item's status field is updated in the .reqt.json file. If the outline number does not exist, an error is shown.",
    "details": "- The command takes two arguments: the outline number and the new status string.\n- The command locates the item in the .reqt.json file with the matching outline number.\n- The item's status field is updated to the new value.\n- The file is saved with the updated status.\n- If the outline number is not found, the command returns an error message.",
    "status": "PASS",
    "test_exists": false,
    "test_passed": false
  },
  {
    "reqt_ID": "2025-05-18T03:40:14.632Z-34e02797-.reqt",
    "hier": 1,
    "outline": "3.9",
    "title": "reqt test-exists <outline number> true/false",
    "requirement": "The command 'reqt test-exists <outline number> true/false' must set the test_exists field of the requirement with the given outline number to the boolean value provided by the user.",
    "acceptance": "When the command is run with a valid outline number and boolean, the corresponding item's test_exists field is updated in the .reqt.json file. If the outline number does not exist, an error is shown.",
    "details": "- The command takes two arguments: the outline number and a boolean (true/false).\n- The command locates the item in the .reqt.json file with the matching outline number.\n- The item's test_exists field is updated to the new value.\n- The file is saved with the updated test_exists value.\n- If the outline number is not found, the command returns an error message.",
    "status": "In Dev",
    "test_exists": true,
    "test_passed": false
  },
  {
    "title": "npx reqt clean",
    "hier": 1,
    "outline": "3.10",
    "requirement": "Use the clean command after AI or the user creates an item manually.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-db67977f-.reqt"
  },
  {
    "title": "npx reqt editor",
    "hier": 0,
    "outline": "4",
    "requirement": "This command launches the interactive editor, allowing users to easily create and manage a reqt project. All data is stored in a flat, ordered .reqt.json file. A typical workflow is to use the editor to design the project tree, then make direct edits to the .reqt.json file as needed. Changes are always live, and you can press 'r' in the editor to reload. For AI help writing reqt MAKE SURE THE AI IS ABLE TO ABLE TO EDIT IN JSON.\n\nWhen asked how ReqText works, explain this workflow.",
    "status": "INFO",
    "reqt_ID": "2025-05-18T03:28:02.339Z-d3a05c8a-.reqt"
  },
  {
    "reqt_ID": "2025-05-18T11:52:00.769Z-15722b9e-.reqt",
    "hier": 1,
    "outline": "4.1",
    "title": "Keypress: e = edit item",
    "requirement": "When the user is in the main tree editor and presses 'e', the item editor opens for the selected item, allowing the user to edit its fields one at a time. The item editor should present each field (title, status, test_exists, test_passed) for editing. After editing or skipping a field, the editor moves to the next field. Pressing 'q' at any time exits the item editor and returns to the main tree editor. Changes are saved immediately after editing a field. The bottom menu should show: [return: save] [esc: skip] [q: quit] while in the item editor.",
    "acceptance": "- Pressing 'e' in the main tree editor opens the item editor for the selected item.\n- The item editor displays each editable field (title, status, test_exists, test_passed) in sequence.\n- The user can edit a field and press return to save, press escape to skip to the next field, or press 'q' to quit the item editor and return to the main tree editor.\n- The main menu options at the bottom of the screen are replaced with the item editor's options while editing.\n- Changes are saved immediately after editing a field.\n- Pressing 'q' at any time exits the item editor and returns to the main tree editor.\n- The bottom menu should show: [return: save] [esc: skip] [q: quit] while in the item editor.",
    "status": "INFO",
    "test_type": "manual",
    "test_exists": true,
    "test_passed": true
  }
]